@using Simple_Ecommerce_Web_app.Services
@using Microsoft.JSInterop
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="">Simple_Ecommerce_Web_app</a>
        @if (AuthService.IsAuthenticated)
        {
            <div class="dropdown user-dropdown" @ref="dropdownRef">
                <button class="btn btn-link text-white text-decoration-none dropdown-toggle" 
                        type="button" 
                        id="userDropdown" 
                        @onclick="ToggleDropdown">
                    <span class="bi bi-person-circle me-1"></span>
                    @AuthService.CurrentUser?.Username
                    @if (AuthService.IsAdmin)
                    {
                        <span class="badge bg-warning text-dark ms-1">Admin</span>
                    }
                </button>
                @if (showDropdown)
                {
                    <ul class="dropdown-menu dropdown-menu-end show" 
                        style="position: absolute; right: 0; top: 100%; z-index: 1050; margin-top: 0.125rem;"
                        @onclick:stopPropagation="true">
                        <li>
                            <a class="dropdown-item" href="/profile" @onclick="CloseDropdown">
                                <span class="bi bi-person me-2"></span>Profile
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <button class="dropdown-item" type="button" @onclick="HandleLogout">
                                <span class="bi bi-box-arrow-right me-2"></span>Logout
                            </button>
                        </li>
                    </ul>
                }
            </div>
        }
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users">
                <span class="bi bi-people-nav-menu" aria-hidden="true"></span> Users
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool showDropdown = false;
    private ElementReference dropdownRef;
    private DotNetObjectReference<NavMenu>? dotNetHelper;

    protected override void OnInitialized()
    {
        AuthService.OnAuthStateChanged += StateHasChanged;
        dotNetHelper = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showDropdown && dotNetHelper != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("dropdownHelper.initialize", dotNetHelper, dropdownRef);
            }
            catch (Exception)
            {
                // Handle JS interop errors silently
            }
        }
        else if (!showDropdown)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("dropdownHelper.dispose", dropdownRef);
            }
            catch (Exception)
            {
                // Handle JS interop errors silently
            }
        }
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
        StateHasChanged();
    }

    [JSInvokable]
    public void CloseDropdownFromJS()
    {
        showDropdown = false;
        StateHasChanged();
    }

    private void CloseDropdown()
    {
        showDropdown = false;
        StateHasChanged();
    }

    private void HandleLogout()
    {
        showDropdown = false;
        AuthService.Logout();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= StateHasChanged;
        dotNetHelper?.Dispose();
    }
}
