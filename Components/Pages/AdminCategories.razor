@page "/admin/categories"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Manage Categories</PageTitle>

@if (!AuthService.IsAuthenticated || !AuthService.IsAdmin)
{
    <div class="alert alert-danger">
        <h4>Access Denied</h4>
        <p>You must be logged in as an administrator to access this page.</p>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <h1>Category Management</h1>
                <p class="text-muted">Manage product categories</p>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="ShowAddCategoryModal">
                    <i class="bi bi-plus-circle"></i> Add New Category
                </button>
            </div>
        </div>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        @if (successMessage != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
            </div>
        }

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Product Count</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr>
                                    <td>@category.Id</td>
                                    <td><strong>@category.Name</strong></td>
                                    <td>@category.Description</td>
                                    <td>
                                        <span class="badge bg-info">@(category.Products?.Count ?? 0) products</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ShowEditCategoryModal(category)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCategory(category.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    @if (showCategoryModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingCategory?.Id > 0 ? "Edit Category" : "Add New Category")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCategoryModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <input type="text" class="form-control" @bind="editingCategory.Name" placeholder="Enter category name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3" @bind="editingCategory.Description" placeholder="Enter category description"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCategoryModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveCategory">Save Category</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Category> categories = new();
    private bool showCategoryModal = false;
    private Category? editingCategory;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated || !AuthService.IsAdmin)
        {
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    private void ShowAddCategoryModal()
    {
        editingCategory = new Category();
        showCategoryModal = true;
        errorMessage = null;
        successMessage = null;
    }

    private void ShowEditCategoryModal(Category category)
    {
        editingCategory = new Category
        {
            Id = category.Id,
            Name = category.Name,
            Description = category.Description
        };
        showCategoryModal = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
        editingCategory = null;
    }

    private async Task SaveCategory()
    {
        if (editingCategory == null) return;

        try
        {
            if (string.IsNullOrWhiteSpace(editingCategory.Name))
            {
                errorMessage = "Category name is required.";
                return;
            }

            if (editingCategory.Id == 0)
            {
                await CategoryService.CreateCategoryAsync(editingCategory);
                successMessage = "Category created successfully!";
            }
            else
            {
                await CategoryService.UpdateCategoryAsync(editingCategory);
                successMessage = "Category updated successfully!";
            }

            await LoadData();
            CloseCategoryModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving category: {ex.Message}";
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmDialog", "Are you sure you want to delete this category? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(categoryId);
                successMessage = "Category deleted successfully!";
                await LoadData();
            }
            catch (InvalidOperationException ex)
            {
                errorMessage = ex.Message;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting category: {ex.Message}";
            }
        }
    }
}
