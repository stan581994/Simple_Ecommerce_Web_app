@page "/admin/products"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject ProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Manage Products</PageTitle>

@if (!AuthService.IsAuthenticated || !AuthService.IsAdmin)
{
    <div class="alert alert-danger">
        <h4>Access Denied</h4>
        <p>You must be logged in as an administrator to access this page.</p>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <h1>Product Management</h1>
                <p class="text-muted">Manage your product catalog and inventory</p>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="ShowAddProductModal">
                    <i class="bi bi-plus-circle"></i> Add New Product
                </button>
            </div>
        </div>

        @if (lowStockProducts.Any())
        {
            <div class="alert alert-warning mb-4">
                <h5><i class="bi bi-exclamation-triangle"></i> Low Stock Alert</h5>
                <p>The following products are running low on stock:</p>
                <ul class="mb-0">
                    @foreach (var product in lowStockProducts)
                    {
                        <li>@product.Name - Only @product.Inventory?.StockQuantity units remaining</li>
                    }
                </ul>
            </div>
        }

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>
                                        <img src="@product.ImageUrl" alt="@product.Name" class="admin-product-image" />
                                    </td>
                                    <td>
                                        <strong>@product.Name</strong><br />
                                        <small class="text-muted">@(product.Description?.Length > 50 ? product.Description.Substring(0, 50) + "..." : product.Description)</small>
                                    </td>
                                    <td>@product.Category?.Name</td>
                                    <td>$@product.Price.ToString("F2")</td>
                                    <td>
                                        @if (product.Inventory != null)
                                        {
                                            <span class="badge @(product.Inventory.StockQuantity <= product.Inventory.ReorderLevel ? "bg-danger" : "bg-success")">
                                                @product.Inventory.StockQuantity units
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (product.Inventory != null && product.Inventory.StockQuantity > 0)
                                        {
                                            <span class="badge bg-success">In Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Out of Stock</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ShowEditProductModal(product)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-success me-1" @onclick="() => ShowStockModal(product)">
                                            <i class="bi bi-box-seam"></i> Stock
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProduct(product.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    @if (showProductModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingProduct?.Id > 0 ? "Edit Product" : "Add New Product")</h5>
                        <button type="button" class="btn-close" @onclick="CloseProductModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Product Name</label>
                            <input type="text" class="form-control" @bind="editingProduct.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3" @bind="editingProduct.Description"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Price</label>
                                <input type="number" step="0.01" class="form-control" @bind="editingProduct.Price" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" @bind="editingProduct.CategoryId">
                                    <option value="0">Select Category</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image URL</label>
                            <input type="text" class="form-control" @bind="editingProduct.ImageUrl" />
                        </div>
                        @if (editingProduct?.Id == 0)
                        {
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Initial Stock</label>
                                    <input type="number" class="form-control" @bind="initialStock" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Reorder Level</label>
                                    <input type="number" class="form-control" @bind="reorderLevel" />
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseProductModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveProduct">Save Product</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showStockModal && selectedProduct != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Update Stock - @selectedProduct.Name</h5>
                        <button type="button" class="btn-close" @onclick="CloseStockModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Current Stock: <strong>@selectedProduct.Inventory?.StockQuantity units</strong></p>
                        <div class="mb-3">
                            <label class="form-label">Quantity Change</label>
                            <input type="number" class="form-control" @bind="stockChange" placeholder="Enter positive to add, negative to remove" />
                            <small class="text-muted">Enter a positive number to add stock, or negative to remove</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseStockModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="UpdateStock">Update Stock</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Product> products = new();
    private List<Product> lowStockProducts = new();
    private List<Category> categories = new();
    private bool showProductModal = false;
    private bool showStockModal = false;
    private Product? editingProduct;
    private Product? selectedProduct;
    private int initialStock = 0;
    private int reorderLevel = 10;
    private int stockChange = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated || !AuthService.IsAdmin)
        {
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        products = await ProductService.GetAllProductsAsync();
        lowStockProducts = await ProductService.GetLowStockProductsAsync();
        categories = await ProductService.GetAllCategoriesAsync();
    }

    private void ShowAddProductModal()
    {
        editingProduct = new Product();
        initialStock = 0;
        reorderLevel = 10;
        showProductModal = true;
    }

    private void ShowEditProductModal(Product product)
    {
        editingProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            ImageUrl = product.ImageUrl,
            CategoryId = product.CategoryId
        };
        showProductModal = true;
    }

    private void CloseProductModal()
    {
        showProductModal = false;
        editingProduct = null;
    }

    private async Task SaveProduct()
    {
        if (editingProduct == null) return;

        try
        {
            if (editingProduct.Id == 0)
            {
                await ProductService.CreateProductAsync(editingProduct, initialStock, reorderLevel);
            }
            else
            {
                await ProductService.UpdateProductAsync(editingProduct);
            }

            await LoadData();
            CloseProductModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmDialog", "Are you sure you want to delete this product? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                await ProductService.DeleteProductAsync(productId);
                await LoadData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting product: {ex.Message}");
            }
        }
    }

    private void ShowStockModal(Product product)
    {
        selectedProduct = product;
        stockChange = 0;
        showStockModal = true;
    }

    private void CloseStockModal()
    {
        showStockModal = false;
        selectedProduct = null;
        stockChange = 0;
    }

    private async Task UpdateStock()
    {
        if (selectedProduct == null) return;

        await ProductService.UpdateStockAsync(selectedProduct.Id, stockChange);
        await LoadData();
        CloseStockModal();
    }

}
