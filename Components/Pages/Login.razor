@page "/login"
@using Simple_Ecommerce_Web_app.Data
@using Simple_Ecommerce_Web_app.Services
@inject AppDbContext DbContext
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body">
                <h3 class="card-title text-center mb-4">Login</h3>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }

                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter username" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter password" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Logging in...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </div>
                </EditForm>

                <hr class="my-4" />

                <div class="text-center">
                    <small class="text-muted">Test Credentials:</small>
                    <div class="mt-2">
                        <small><strong>Admin:</strong> admin / admin123</small><br />
                        <small><strong>Customer:</strong> customer / customer123</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // If already logged in, redirect to home
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;
        successMessage = null;
        isLoading = true;

        try
        {
            bool loginSuccess = await AuthService.LoginAsync(DbContext, loginModel.Username, loginModel.Password);

            if (loginSuccess)
            {
                successMessage = "Login successful! Redirecting...";
                await Task.Delay(1000); // Brief delay to show success message
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
