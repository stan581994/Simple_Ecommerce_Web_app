@page "/products"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject CartService CartService
@inject NavigationManager Navigation
@inject ProductService ProductService

<PageTitle>Products - DRESSHY</PageTitle>

<div class="container py-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 fw-bold text-center mb-3">Our Products</h1>
            <p class="lead text-center text-muted">Discover our complete collection of fashion-forward clothing and accessories</p>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-4">
        <div class="col-lg-3 mb-3">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filters</h5>
                </div>
                <div class="card-body">
                    <!-- Category Filter -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">Category</label>
                        <select class="form-select" @bind="selectedCategory" @bind:after="FilterProducts">
                            <option value="">All Categories</option>
                            <option value="women">Women's Fashion</option>
                            <option value="men">Men's Fashion</option>
                            <option value="accessories">Accessories</option>
                            <option value="shoes">Shoes</option>
                        </select>
                    </div>

                    <!-- Price Range Filter -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">Price Range</label>
                        <select class="form-select" @bind="selectedPriceRange" @bind:after="FilterProducts">
                            <option value="">All Prices</option>
                            <option value="0-50">$0 - $50</option>
                            <option value="50-100">$50 - $100</option>
                            <option value="100-200">$100 - $200</option>
                            <option value="200+">$200+</option>
                        </select>
                    </div>

                    <!-- Sort By -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">Sort By</label>
                        <select class="form-select" @bind="sortBy" @bind:after="FilterProducts">
                            <option value="name">Name</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="newest">Newest First</option>
                        </select>
                    </div>

                    <!-- Clear Filters -->
                    <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                        <i class="fas fa-times me-2"></i>Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <div class="col-lg-9">
            <!-- Search Bar -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="input-group input-group-lg">
                        <input type="text" class="form-control" placeholder="Search products..." @bind="searchTerm" @onkeyup="FilterProducts">
                        <button class="btn btn-primary" type="button" @onclick="FilterProducts">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Results Info -->
            <div class="row mb-3">
                <div class="col-12">
                    <p class="text-muted">Showing @filteredProducts.Count of @allProducts.Count products</p>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="row g-4">
                @if (filteredProducts.Any())
                {
                    @foreach (var product in filteredProducts)
                    {
                        <div class="col-lg-4 col-md-6">
                            <div class="card product-card h-100">
                                @if (product.IsOnSale)
                                {
                                    <div class="badge-sale">SALE</div>
                                }
                                @if (product.IsNew)
                                {
                                    <div class="badge-new">NEW</div>
                                }
                                <img src="@product.ImageUrl" class="card-img-top product-image" alt="@product.Name">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title product-title">@product.Name</h5>
                                    <p class="card-text text-muted flex-grow-1">@product.Description</p>
                                    <div class="mb-2">
                                        <span class="badge bg-secondary">@product.Category</span>
                                        @if (product.Stock <= 5 && product.Stock > 0)
                                        {
                                            <span class="badge bg-warning text-dark">Low Stock</span>
                                        }
                                        @if (product.Stock == 0)
                                        {
                                            <span class="badge bg-danger">Out of Stock</span>
                                        }
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mt-auto">
                                        <div>
                                            @if (product.IsOnSale)
                                            {
                                                <span class="product-original-price">$@product.OriginalPrice.ToString("F2")</span>
                                            }
                                            <span class="product-price">$@product.Price.ToString("F2")</span>
                                        </div>
                                        <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product.Id)" disabled="@(product.Stock == 0)">
                                            <i class="fas fa-cart-plus me-1"></i>Add to Cart
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="text-center py-5">
                            <i class="fas fa-search fa-3x text-muted mb-3"></i>
                            <h4>No products found</h4>
                            <p class="text-muted">Try adjusting your search criteria or filters</p>
                            <button class="btn btn-primary" @onclick="ClearFilters">Clear All Filters</button>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (filteredProducts.Count > productsPerPage)
            {
                <div class="row mt-5">
                    <div class="col-12">
                        <nav aria-label="Products pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    <li class="page-item @(currentPage == i ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedPriceRange = "";
    private string sortBy = "name";
    private int currentPage = 1;
    private int productsPerPage = 9;
    private int totalPages => (int)Math.Ceiling((double)filteredProducts.Count / productsPerPage);

    private List<Product> allProducts = new List<Product>();
    private List<Product> filteredProducts = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        FilterProducts();
    }

    private async Task LoadProducts()
    {
        var dbProducts = await ProductService.GetAllProductsAsync();
        allProducts = dbProducts.Select(p => new Product
        {
            Id = p.Id,
            Name = p.Name,
            Description = p.Description ?? "",
            Price = p.Price,
            OriginalPrice = p.OriginalPrice,
            ImageUrl = p.ImageUrl ?? "",
            IsOnSale = p.IsOnSale,
            IsNew = p.IsNew,
            Category = p.Category?.Name?.ToLower() ?? "",
            Stock = p.Inventory?.StockQuantity ?? 0
        }).ToList();
    }

    private void FilterProducts()
    {
        var products = allProducts.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            products = products.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                         p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply category filter
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            products = products.Where(p => p.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        // Apply price range filter
        if (!string.IsNullOrWhiteSpace(selectedPriceRange))
        {
            products = selectedPriceRange switch
            {
                "0-50" => products.Where(p => p.Price <= 50),
                "50-100" => products.Where(p => p.Price > 50 && p.Price <= 100),
                "100-200" => products.Where(p => p.Price > 100 && p.Price <= 200),
                "200+" => products.Where(p => p.Price > 200),
                _ => products
            };
        }

        // Apply sorting
        products = sortBy switch
        {
            "price-low" => products.OrderBy(p => p.Price),
            "price-high" => products.OrderByDescending(p => p.Price),
            "newest" => products.OrderByDescending(p => p.IsNew).ThenBy(p => p.Name),
            _ => products.OrderBy(p => p.Name)
        };

        filteredProducts = products.ToList();
        currentPage = 1; // Reset to first page when filtering
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        selectedPriceRange = "";
        sortBy = "name";
        FilterProducts();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void ViewProduct(int productId)
    {
        // TODO: Navigate to product detail page
        Console.WriteLine($"Viewing product {productId}");
    }

    private async Task AddToCart(int productId)
    {
        var product = filteredProducts.FirstOrDefault(p => p.Id == productId);
        if (product != null && product.Stock > 0)
        {
            try
            {
                // Show confirmation dialog
                var confirmed = await JSRuntime.InvokeAsync<bool>("confirmDialog", 
                    $"Are you sure you want to add '{product.Name}' to your cart?");
                
                if (!confirmed)
                {
                    return;
                }
                
                var cartProduct = new
                {
                    id = product.Id,
                    name = product.Name,
                    description = product.Description,
                    price = (double)product.Price,
                    originalPrice = (double)(product.OriginalPrice > 0 ? product.OriginalPrice : product.Price),
                    imageUrl = product.ImageUrl,
                    isOnSale = product.IsOnSale,
                    category = product.Category,
                    stock = product.Stock
                };
                
                // Call JavaScript directly to add to cart
                await JSRuntime.InvokeAsync<int>("cartManager.addToCart", cartProduct);
                
                // Get the actual cart item count (total quantity)
                var count = await JSRuntime.InvokeAsync<int>("cartManager.getCartCount");
                
                // Notify CartService to update the badge
                CartService.NotifyCartChanged(count);
                
                Console.WriteLine($"Product added to cart. New count: {count}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding to cart: {ex.Message}");
            }
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public decimal Price { get; set; }
        public decimal OriginalPrice { get; set; }
        public string ImageUrl { get; set; } = "";
        public bool IsOnSale { get; set; }
        public bool IsNew { get; set; }
        public string Category { get; set; } = "";
        public int Stock { get; set; }
    }
}
