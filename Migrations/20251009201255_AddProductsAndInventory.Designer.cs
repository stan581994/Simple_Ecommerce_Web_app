// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simple_Ecommerce_Web_app.Data;

#nullable disable

namespace Simple_Ecommerce_Web_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251009201255_AddProductsAndInventory")]
    partial class AddProductsAndInventory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Clothing and accessories for women",
                            Name = "Women's Fashion"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Clothing and accessories for men",
                            Name = "Men's Fashion"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fashion accessories and jewelry",
                            Name = "Accessories"
                        });
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRestocked")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSold")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastRestocked = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 1,
                            ReorderLevel = 10,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            LastRestocked = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 2,
                            ReorderLevel = 10,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            LastRestocked = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 3,
                            ReorderLevel = 5,
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 4,
                            LastRestocked = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 4,
                            ReorderLevel = 20,
                            StockQuantity = 100
                        });
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Perfect for any occasion with its flowing design and comfortable fabric.",
                            ImageUrl = "https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                            Name = "Elegant Summer Dress",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Timeless style meets modern comfort in this versatile denim jacket.",
                            ImageUrl = "https://images.unsplash.com/photo-1551028719-00167b16eac5?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                            Name = "Classic Denim Jacket",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crafted from genuine leather with attention to every detail.",
                            ImageUrl = "https://images.unsplash.com/photo-1584917865442-de89df76afd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                            Name = "Premium Leather Handbag",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Soft, breathable cotton in a relaxed fit for everyday comfort.",
                            ImageUrl = "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                            Name = "Casual Cotton T-Shirt",
                            Price = 24.99m
                        });
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAddProducts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAddToCart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditPrices")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewProducts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanAddProducts = true,
                            CanAddToCart = true,
                            CanEditPrices = true,
                            CanViewProducts = true,
                            Description = "Administrator with full access",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CanAddProducts = false,
                            CanAddToCart = true,
                            CanEditPrices = false,
                            CanViewProducts = true,
                            Description = "Regular customer",
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@ecommerce.com",
                            PasswordHash = "$2a$11$mgO4puH0wsnMlbbaRd6YRO0APtVEJrILAQAV.7vtiXborKZjPWVoW",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer@ecommerce.com",
                            PasswordHash = "$2a$11$rXJJaglNRhWxplqO1Y9buuxLpDL3DwrnUV2GIcVSkltc3nt.I6TRC",
                            RoleId = 2,
                            Username = "customer"
                        });
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Inventory", b =>
                {
                    b.HasOne("Simple_Ecommerce_Web_app.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("Simple_Ecommerce_Web_app.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Product", b =>
                {
                    b.HasOne("Simple_Ecommerce_Web_app.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.User", b =>
                {
                    b.HasOne("Simple_Ecommerce_Web_app.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Product", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Simple_Ecommerce_Web_app.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
